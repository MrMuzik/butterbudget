{"version":3,"file":"3.DAObwj_e.js","sources":["../../../../../../node_modules/svelte/src/runtime/internal/each.js","../../../../../../src/routes/budgets/+page.svelte"],"sourcesContent":["import { transition_in, transition_out } from './transitions.js';\nimport { run_all } from './utils.js';\n\n// general each functions:\n\nexport function ensure_array_like(array_like_or_iterator) {\n\treturn array_like_or_iterator?.length !== undefined\n\t\t? array_like_or_iterator\n\t\t: Array.from(array_like_or_iterator);\n}\n\n// keyed each functions:\n\n/** @returns {void} */\nexport function destroy_block(block, lookup) {\n\tblock.d(1);\n\tlookup.delete(block.key);\n}\n\n/** @returns {void} */\nexport function outro_and_destroy_block(block, lookup) {\n\ttransition_out(block, 1, 1, () => {\n\t\tlookup.delete(block.key);\n\t});\n}\n\n/** @returns {void} */\nexport function fix_and_destroy_block(block, lookup) {\n\tblock.f();\n\tdestroy_block(block, lookup);\n}\n\n/** @returns {void} */\nexport function fix_and_outro_and_destroy_block(block, lookup) {\n\tblock.f();\n\toutro_and_destroy_block(block, lookup);\n}\n\n/** @returns {any[]} */\nexport function update_keyed_each(\n\told_blocks,\n\tdirty,\n\tget_key,\n\tdynamic,\n\tctx,\n\tlist,\n\tlookup,\n\tnode,\n\tdestroy,\n\tcreate_each_block,\n\tnext,\n\tget_context\n) {\n\tlet o = old_blocks.length;\n\tlet n = list.length;\n\tlet i = o;\n\tconst old_indexes = {};\n\twhile (i--) old_indexes[old_blocks[i].key] = i;\n\tconst new_blocks = [];\n\tconst new_lookup = new Map();\n\tconst deltas = new Map();\n\tconst updates = [];\n\ti = n;\n\twhile (i--) {\n\t\tconst child_ctx = get_context(ctx, list, i);\n\t\tconst key = get_key(child_ctx);\n\t\tlet block = lookup.get(key);\n\t\tif (!block) {\n\t\t\tblock = create_each_block(key, child_ctx);\n\t\t\tblock.c();\n\t\t} else if (dynamic) {\n\t\t\t// defer updates until all the DOM shuffling is done\n\t\t\tupdates.push(() => block.p(child_ctx, dirty));\n\t\t}\n\t\tnew_lookup.set(key, (new_blocks[i] = block));\n\t\tif (key in old_indexes) deltas.set(key, Math.abs(i - old_indexes[key]));\n\t}\n\tconst will_move = new Set();\n\tconst did_move = new Set();\n\t/** @returns {void} */\n\tfunction insert(block) {\n\t\ttransition_in(block, 1);\n\t\tblock.m(node, next);\n\t\tlookup.set(block.key, block);\n\t\tnext = block.first;\n\t\tn--;\n\t}\n\twhile (o && n) {\n\t\tconst new_block = new_blocks[n - 1];\n\t\tconst old_block = old_blocks[o - 1];\n\t\tconst new_key = new_block.key;\n\t\tconst old_key = old_block.key;\n\t\tif (new_block === old_block) {\n\t\t\t// do nothing\n\t\t\tnext = new_block.first;\n\t\t\to--;\n\t\t\tn--;\n\t\t} else if (!new_lookup.has(old_key)) {\n\t\t\t// remove old block\n\t\t\tdestroy(old_block, lookup);\n\t\t\to--;\n\t\t} else if (!lookup.has(new_key) || will_move.has(new_key)) {\n\t\t\tinsert(new_block);\n\t\t} else if (did_move.has(old_key)) {\n\t\t\to--;\n\t\t} else if (deltas.get(new_key) > deltas.get(old_key)) {\n\t\t\tdid_move.add(new_key);\n\t\t\tinsert(new_block);\n\t\t} else {\n\t\t\twill_move.add(old_key);\n\t\t\to--;\n\t\t}\n\t}\n\twhile (o--) {\n\t\tconst old_block = old_blocks[o];\n\t\tif (!new_lookup.has(old_block.key)) destroy(old_block, lookup);\n\t}\n\twhile (n) insert(new_blocks[n - 1]);\n\trun_all(updates);\n\treturn new_blocks;\n}\n\n/** @returns {void} */\nexport function validate_each_keys(ctx, list, get_context, get_key) {\n\tconst keys = new Map();\n\tfor (let i = 0; i < list.length; i++) {\n\t\tconst key = get_key(get_context(ctx, list, i));\n\t\tif (keys.has(key)) {\n\t\t\tlet value = '';\n\t\t\ttry {\n\t\t\t\tvalue = `with value '${String(key)}' `;\n\t\t\t} catch (e) {\n\t\t\t\t// can't stringify\n\t\t\t}\n\t\t\tthrow new Error(\n\t\t\t\t`Cannot have duplicate keys in a keyed each: Keys at index ${keys.get(\n\t\t\t\t\tkey\n\t\t\t\t)} and ${i} ${value}are duplicates`\n\t\t\t);\n\t\t}\n\t\tkeys.set(key, i);\n\t}\n}\n","<script lang=\"ts\">\n    import { onMount } from 'svelte';\n  \n    let budgets: any[] = [];\n    let description = '';\n    let amount = '';\n  \n    // Fetch the API base URL from environment variables\n    const API_BASE_URL = import.meta.env.VITE_API_BASE_URL;\n  \n    // Fetch budget items from the backend\n    const fetchBudgets = async () => {\n  try {\n    const res = await fetch(`${import.meta.env.VITE_API_BASE_URL}/api/budgets`);\n    if (!res.ok) {\n      throw new Error(`Error fetching budgets: ${res.status}`);\n    }\n    budgets = await res.json();\n  } catch (err) {\n    console.error(\"Failed to fetch budgets:\", err);\n    // You can set an error message here to display on the frontend if needed.\n  }\n};\n  \n    // Add a new budget item\n    const addBudget = async () => {\n      if (description && amount) {\n        await fetch(`${API_BASE_URL}/api/budgets`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ description, amount: parseFloat(amount) }),\n        });\n        description = '';\n        amount = '';\n        await fetchBudgets();\n      }\n    };\n  \n    // Delete a budget item\n    const deleteBudget = async (id: any) => {\n      await fetch(`${API_BASE_URL}/api/budgets/${id}`, { method: 'DELETE' });\n      await fetchBudgets();\n    };\n  \n    // Fetch budgets when component mounts\n    onMount(fetchBudgets);\n  </script>\n  \n  <h1>Budget Tracker</h1>\n  <input type=\"text\" bind:value={description} placeholder=\"Description\" />\n  <input type=\"number\" bind:value={amount} placeholder=\"Amount\" />\n  <button on:click={addBudget}>Add Budget</button>\n  \n  <ul>\n    {#each budgets as budget}\n      <li>\n        {budget.description} - ${budget.amount}\n        <button on:click={() => deleteBudget(budget.id)}>Delete</button>\n      </li>\n    {/each}\n  </ul>\n  "],"names":["ensure_array_like","array_like_or_iterator","t0_value","ctx","t2_value","insert_hydration","target","li","anchor","append_hydration","button","dirty","set_data","t0","t2","i","h1","input0","input1","ul","budgets","description","amount","API_BASE_URL","fetchBudgets","res","$$invalidate","err","addBudget","deleteBudget","id","onMount","to_number","budget"],"mappings":"uPAKO,SAASA,EAAkBC,EAAwB,CACzD,OAAOA,GAAA,YAAAA,EAAwB,UAAW,OACvCA,EACA,MAAM,KAAKA,CAAsB,CACrC,6EC+CSC,EAAAC,MAAO,YAAW,OAAMC,EAAAD,MAAO,OAAM,0FAAlB,MAAI,kGAAJ,MAAI,8HAEtBE,EAAAC,EAAAC,EAAAC,CAAA,8BADFC,EAA+DF,EAAAG,CAAA,gDAD9DC,EAAA,GAAAT,KAAAA,EAAAC,MAAO,YAAW,KAAAS,EAAAC,EAAAX,CAAA,EAAMS,EAAA,GAAAP,KAAAA,EAAAD,MAAO,OAAM,KAAAS,EAAAE,EAAAV,CAAA,yGAFnCD,EAAO,CAAA,CAAA,uBAAZ,OAAIY,GAAA,mpBANcV,EAAAC,EAAAU,EAAAR,CAAA,WACiDH,EAAAC,EAAAW,EAAAT,CAAA,MAAxCL,EAAW,CAAA,CAAA,WACqBE,EAAAC,EAAAY,EAAAV,CAAA,MAA9BL,EAAM,CAAA,CAAA,WACQE,EAAAC,EAAAI,EAAAF,CAAA,WAS3CH,EAAAC,EAAAa,EAAAX,CAAA,0GATcL,EAAS,CAAA,CAAA,CAAA,oCAFIA,EAAW,CAAA,OAAXA,EAAW,CAAA,CAAA,oBACTA,EAAM,CAAA,OAANA,EAAM,CAAA,CAAA,YAI9BA,EAAO,CAAA,CAAA,oBAAZ,OAAIY,GAAA,EAAA,iHAAJ,6GAnDE,IAAAK,EAAA,CAAA,EACAC,EAAc,GACdC,EAAS,GAGP,MAAAC,EAAe,iCAGfC,EAAA,SAAA,WAEAC,EAAY,MAAA,MAAA,4CAA0C,MACvDA,EAAI,GACG,MAAA,IAAA,MAAA,2BAAiCA,EAAI,MAAM,EAAA,EAEvDC,EAAA,EAAAN,EAAA,MAAgBK,EAAI,KAAA,CAAA,QACbE,EAAA,CACC,QAAA,MAAM,2BAA4BA,CAAG,IAMvCC,EAAA,SAAA,CACAP,GAAeC,IACX,MAAA,MAAA,GAASC,CAAY,eAAA,CACzB,OAAQ,OACR,QAAA,CAAW,eAAgB,kBAAA,EAC3B,KAAM,KAAK,UAAA,CAAY,YAAAF,EAAa,OAAQ,WAAWC,CAAM,EAAA,CAAA,OAE/DD,EAAc,EAAA,MACdC,EAAS,EAAA,EACH,MAAAE,EAAA,IAKJK,EAAsB,MAAAC,GAAA,CACpB,MAAA,MAAA,GAASP,CAAY,gBAAgBO,CAAE,GAAA,CAAM,OAAQ,QAAA,CAAA,EACrD,MAAAN,EAAA,CAAA,EAIRO,EAAQP,CAAY,eAISH,EAAW,KAAA,0BACHC,EAAAU,EAAA,KAAA,KAAA,iCAOTH,EAAaI,EAAO,EAAE","x_google_ignoreList":[0]}